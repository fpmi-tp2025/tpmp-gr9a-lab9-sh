name: iOS CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  XCODE_VERSION: '16.2'
  IOS_SIMULATOR_VERSION: '18.2'
  DERIVED_DATA_PATH: ~/Library/Developer/Xcode/DerivedData

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: Show Xcode Version
      run: |
        xcodebuild -version
        xcrun simctl list devicetypes
        
    - name: Cache DerivedData
      uses: actions/cache@v4
      with:
        path: ${{ env.DERIVED_DATA_PATH }}
        key: ${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-derived-data-${{ hashFiles('**/BankApp.xcodeproj/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-derived-data-
          
    - name: Create Build Directory
      run: mkdir -p build/reports
      
    - name: List Available Simulators
      run: xcrun simctl list devices available
      
    - name: Fix Deployment Target
      run: |
        cd Bank
        # Update deployment target in project settings to match simulator version
        # This fixes the iOS 18.4 vs 18.2 mismatch
        sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = 18.4/IPHONEOS_DEPLOYMENT_TARGET = 18.2/g' BankApp.xcodeproj/project.pbxproj || true
        echo "Updated deployment target to iOS 18.2"
        
    - name: Clean Build Folder
      run: |
        cd Bank
        rm -rf ${{ env.DERIVED_DATA_PATH }}
        
    - name: Resolve Package Dependencies
      run: |
        cd Bank
        xcodebuild -resolvePackageDependencies \
          -project BankApp.xcodeproj \
          -scheme BankApp
          
    - name: Build Project
      run: |
        cd Bank
        set -o pipefail
        xcodebuild -project BankApp.xcodeproj \
          -scheme BankApp \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=${{ env.IOS_SIMULATOR_VERSION }}' \
          -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
          -configuration Debug \
          clean build \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          ONLY_ACTIVE_ARCH=YES \
          | tee build.log
          
    - name: Check for Build Issues
      if: failure()
      run: |
        cd Bank
        echo "=== BUILD FAILED - Analyzing Issues ==="
        if [ -f build.log ]; then
          echo "=== Last 50 lines of build log ==="
          tail -50 build.log
          echo ""
          echo "=== SQLite Expression Errors ==="
          grep -n "missing argument label" build.log || true
          echo ""
          echo "=== Type Inference Errors ==="
          grep -n "could not be inferred" build.log || true
        fi
        
    - name: Fix SQLite Expression Syntax (if build failed)
      if: failure()
      run: |
        cd Bank/BankApp
        echo "Attempting to fix SQLite.swift syntax errors..."
        
        # Fix ViewControllerAccount.swift
        if [ -f ViewControllerAccount.swift ]; then
          # Fix Expression initializers - add 'value:' label
          sed -i '' 's/Expression<String>("account_type")/Expression<String>(value: "account_type")/g' ViewControllerAccount.swift
          sed -i '' 's/Expression<String?>("account_subtype")/Expression<String?>(value: "account_subtype")/g' ViewControllerAccount.swift
          sed -i '' 's/Expression<Double>("balance")/Expression<Double>(value: "balance")/g' ViewControllerAccount.swift
          sed -i '' 's/Expression<Double?>("overdraft_limit")/Expression<Double?>(value: "overdraft_limit")/g' ViewControllerAccount.swift
          sed -i '' 's/Expression<String>("username")/Expression<String>(value: "username")/g' ViewControllerAccount.swift
          sed -i '' 's/Expression<Int64>("account_id")/Expression<Int64>(value: "account_id")/g' ViewControllerAccount.swift
          echo "Fixed Expression syntax in ViewControllerAccount.swift"
        fi
        
        # Fix ViewControllerAccounts.swift  
        if [ -f ViewControllerAccounts.swift ]; then
          sed -i '' 's/Expression<Int64>("user_id")/Expression<Int64>(value: "user_id")/g' ViewControllerAccounts.swift
          sed -i '' 's/Expression<Bool>("is_blocked")/Expression<Bool>(value: "is_blocked")/g' ViewControllerAccounts.swift
          sed -i '' 's/Expression<Int64>("account_id")/Expression<Int64>(value: "account_id")/g' ViewControllerAccounts.swift
          sed -i '' 's/Expression<String>("account_type")/Expression<String>(value: "account_type")/g' ViewControllerAccounts.swift
          sed -i '' 's/Expression<Double>("balance")/Expression<Double>(value: "balance")/g' ViewControllerAccounts.swift
          echo "Fixed Expression syntax in ViewControllerAccounts.swift"
        fi
        
    - name: Retry Build After Fixes
      if: failure()
      run: |
        cd Bank
        echo "Retrying build after applying fixes..."
        set -o pipefail
        xcodebuild -project BankApp.xcodeproj \
          -scheme BankApp \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=${{ env.IOS_SIMULATOR_VERSION }}' \
          -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
          -configuration Debug \
          clean build \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          ONLY_ACTIVE_ARCH=YES
          
    - name: Run Unit Tests
      run: |
        cd Bank
        set -o pipefail
        xcodebuild -project BankApp.xcodeproj \
          -scheme BankApp \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=${{ env.IOS_SIMULATOR_VERSION }}' \
          -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
          test \
          -only-testing:BankAppTests \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          -resultBundlePath build/reports/unit-tests.xcresult \
          | tee unit-test.log
          
    - name: Run UI Tests
      run: |
        cd Bank
        set -o pipefail
        xcodebuild -project BankApp.xcodeproj \
          -scheme BankApp \
          -destination 'platform=iOS Simulator,name=iPhone 16,OS=${{ env.IOS_SIMULATOR_VERSION }}' \
          -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
          test \
          -only-testing:BankAppUITests \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          -resultBundlePath build/reports/ui-tests.xcresult \
          | tee ui-test.log
          
    - name: Generate Test Report
      if: always()
      run: |
        cd Bank
        echo "=== TEST SUMMARY ==="
        if [ -f unit-test.log ]; then
          echo "Unit Tests Results:"
          grep -E "(Test Suite|Test Case.*passed|Test Case.*failed|Executed.*tests)" unit-test.log | tail -10
        fi
        if [ -f ui-test.log ]; then
          echo "UI Tests Results:"
          grep -E "(Test Suite|Test Case.*passed|Test Case.*failed|Executed.*tests)" ui-test.log | tail -10
        fi
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: Bank/build/reports/
        retention-days: 30
        
    - name: Upload Build Logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: |
          Bank/build.log
          Bank/unit-test.log  
          Bank/ui-test.log
        retention-days: 7
        
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: ${{ env.DERIVED_DATA_PATH }}/*/Logs/Test/*.xcresult
        retention-days: 30

  build-release:
    name: Build Release
    runs-on: macos-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 30
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: Cache DerivedData
      uses: actions/cache@v4
      with:
        path: ${{ env.DERIVED_DATA_PATH }}
        key: ${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-derived-data-${{ hashFiles('**/BankApp.xcodeproj/project.pbxproj') }}
        restore-keys: |
          ${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-derived-data-
          
    - name: Fix Deployment Target for Release
      run: |
        cd Bank
        sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = 18.4/IPHONEOS_DEPLOYMENT_TARGET = 18.2/g' BankApp.xcodeproj/project.pbxproj || true
        
    - name: Apply SQLite Fixes for Release
      run: |
        cd Bank/BankApp
        
        # Apply the same SQLite fixes for release build
        if [ -f ViewControllerAccount.swift ]; then
          sed -i '' 's/Expression<String>("account_type")/Expression<String>(value: "account_type")/g' ViewControllerAccount.swift
          sed -i '' 's/Expression<String?>("account_subtype")/Expression<String?>(value: "account_subtype")/g' ViewControllerAccount.swift
          sed -i '' 's/Expression<Double>("balance")/Expression<Double>(value: "balance")/g' ViewControllerAccount.swift
          sed -i '' 's/Expression<Double?>("overdraft_limit")/Expression<Double?>(value: "overdraft_limit")/g' ViewControllerAccount.swift
          sed -i '' 's/Expression<String>("username")/Expression<String>(value: "username")/g' ViewControllerAccount.swift
          sed -i '' 's/Expression<Int64>("account_id")/Expression<Int64>(value: "account_id")/g' ViewControllerAccount.swift
        fi
        
        if [ -f ViewControllerAccounts.swift ]; then
          sed -i '' 's/Expression<Int64>("user_id")/Expression<Int64>(value: "user_id")/g' ViewControllerAccounts.swift
          sed -i '' 's/Expression<Bool>("is_blocked")/Expression<Bool>(value: "is_blocked")/g' ViewControllerAccounts.swift  
          sed -i '' 's/Expression<Int64>("account_id")/Expression<Int64>(value: "account_id")/g' ViewControllerAccounts.swift
          sed -i '' 's/Expression<String>("account_type")/Expression<String>(value: "account_type")/g' ViewControllerAccounts.swift
          sed -i '' 's/Expression<Double>("balance")/Expression<Double>(value: "balance")/g' ViewControllerAccounts.swift
        fi
        
    - name: Build for Release
      run: |
        cd Bank
        set -o pipefail
        xcodebuild -project BankApp.xcodeproj \
          -scheme BankApp \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -derivedDataPath ${{ env.DERIVED_DATA_PATH }} \
          clean build \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          ONLY_ACTIVE_ARCH=NO
          
    - name: Archive Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-build
        path: ${{ env.DERIVED_DATA_PATH }}/Build/Products/Release-iphoneos/
        retention-days: 90
